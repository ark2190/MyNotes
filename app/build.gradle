apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'realm-android'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.mynotes"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        //enable multidex
        multiDexEnabled true
    }

    buildTypes {
        def BASE_API_URL = "API_URL"
        debug {
            buildConfigField "String", BASE_API_URL, "\"${getProperty("local.properties", "debug.api_url")}\""
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", BASE_API_URL, "\"${getProperty("local.properties", "debug.api_url")}\""
        }
    }
}

realm {
    syncEnabled = true;
}

ext {
    support_libs_version = '26.1.0'
    butterknife_version = '8.8.1'
    dagger_version = '2.10'
    retrofit_version = '2.4.0'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    //support libs
    implementation "com.android.support:appcompat-v7:$support_libs_version"
    implementation "com.android.support:support-v4:$support_libs_version"
    implementation "com.android.support:recyclerview-v7:$support_libs_version"
    implementation "com.android.support:design:$support_libs_version"
    implementation "com.android.support.constraint:constraint-layout:1.0.2"

    //multidex
    compile 'com.android.support:multidex:1.0.2'

    //dagger2
    compile "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    //rx-android
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.3'
    provided 'javax.annotation:jsr250-api:1.0'

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava2:${retrofit_version}"
    compile "com.squareup.retrofit2:converter-jackson:${retrofit_version}"

    //butterknife
    implementation "com.jakewharton:butterknife:$butterknife_version"
    kapt "com.jakewharton:butterknife-compiler:$butterknife_version"

    //jackson
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.4.1"

    //greendao eventbus
    compile 'org.greenrobot:eventbus:3.1.1'

    //junit
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename);
        }
    } else {
        print(filename + " does not exist!")
    }
}